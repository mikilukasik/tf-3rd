import * as path from 'path';
import { promises as fs } from 'fs';
import { shuffle } from '../../../chss-module-engine/src/utils/schuffle.js';
import { getSavedObject } from '../../../chss-module-engine/src/utils/savedObject/savedObject.mjs';
import { getRandomizedFilelist } from './getRandomizedFilelist.mjs';
import { getXsAsString as getXs } from '../../utils/getXs.js';

const onehot_map = [
  [0, 9, ''],
  [0, 18, ''],
  [0, 27, ''],
  [0, 36, ''],
  [0, 45, ''],
  [0, 54, ''],
  [0, 63, ''],
  [0, 1, ''],
  [0, 2, ''],
  [0, 3, ''],
  [0, 4, ''],
  [0, 5, ''],
  [0, 6, ''],
  [0, 7, ''],
  [0, 8, ''],
  [0, 16, ''],
  [0, 24, ''],
  [0, 32, ''],
  [0, 40, ''],
  [0, 48, ''],
  [0, 56, ''],
  [0, 17, ''],
  [0, 10, ''],
  [1, 8, ''],
  [1, 10, ''],
  [1, 19, ''],
  [1, 28, ''],
  [1, 37, ''],
  [1, 46, ''],
  [1, 55, ''],
  [1, 2, ''],
  [1, 3, ''],
  [1, 4, ''],
  [1, 5, ''],
  [1, 6, ''],
  [1, 7, ''],
  [1, 9, ''],
  [1, 17, ''],
  [1, 25, ''],
  [1, 33, ''],
  [1, 41, ''],
  [1, 49, ''],
  [1, 57, ''],
  [1, 0, ''],
  [1, 16, ''],
  [1, 18, ''],
  [1, 11, ''],
  [2, 9, ''],
  [2, 16, ''],
  [2, 11, ''],
  [2, 20, ''],
  [2, 29, ''],
  [2, 38, ''],
  [2, 47, ''],
  [2, 3, ''],
  [2, 4, ''],
  [2, 5, ''],
  [2, 6, ''],
  [2, 7, ''],
  [2, 10, ''],
  [2, 18, ''],
  [2, 26, ''],
  [2, 34, ''],
  [2, 42, ''],
  [2, 50, ''],
  [2, 58, ''],
  [2, 1, ''],
  [2, 0, ''],
  [2, 17, ''],
  [2, 19, ''],
  [2, 8, ''],
  [2, 12, ''],
  [3, 10, ''],
  [3, 17, ''],
  [3, 24, ''],
  [3, 12, ''],
  [3, 21, ''],
  [3, 30, ''],
  [3, 39, ''],
  [3, 4, ''],
  [3, 5, ''],
  [3, 6, ''],
  [3, 7, ''],
  [3, 11, ''],
  [3, 19, ''],
  [3, 27, ''],
  [3, 35, ''],
  [3, 43, ''],
  [3, 51, ''],
  [3, 59, ''],
  [3, 2, ''],
  [3, 1, ''],
  [3, 0, ''],
  [3, 18, ''],
  [3, 20, ''],
  [3, 9, ''],
  [3, 13, ''],
  [4, 11, ''],
  [4, 18, ''],
  [4, 25, ''],
  [4, 32, ''],
  [4, 13, ''],
  [4, 22, ''],
  [4, 31, ''],
  [4, 5, ''],
  [4, 6, ''],
  [4, 7, ''],
  [4, 12, ''],
  [4, 20, ''],
  [4, 28, ''],
  [4, 36, ''],
  [4, 44, ''],
  [4, 52, ''],
  [4, 60, ''],
  [4, 3, ''],
  [4, 2, ''],
  [4, 1, ''],
  [4, 0, ''],
  [4, 19, ''],
  [4, 21, ''],
  [4, 10, ''],
  [4, 14, ''],
  [5, 12, ''],
  [5, 19, ''],
  [5, 26, ''],
  [5, 33, ''],
  [5, 40, ''],
  [5, 14, ''],
  [5, 23, ''],
  [5, 6, ''],
  [5, 7, ''],
  [5, 13, ''],
  [5, 21, ''],
  [5, 29, ''],
  [5, 37, ''],
  [5, 45, ''],
  [5, 53, ''],
  [5, 61, ''],
  [5, 4, ''],
  [5, 3, ''],
  [5, 2, ''],
  [5, 1, ''],
  [5, 0, ''],
  [5, 20, ''],
  [5, 22, ''],
  [5, 11, ''],
  [5, 15, ''],
  [6, 13, ''],
  [6, 20, ''],
  [6, 27, ''],
  [6, 34, ''],
  [6, 41, ''],
  [6, 48, ''],
  [6, 15, ''],
  [6, 7, ''],
  [6, 14, ''],
  [6, 22, ''],
  [6, 30, ''],
  [6, 38, ''],
  [6, 46, ''],
  [6, 54, ''],
  [6, 62, ''],
  [6, 5, ''],
  [6, 4, ''],
  [6, 3, ''],
  [6, 2, ''],
  [6, 1, ''],
  [6, 0, ''],
  [6, 21, ''],
  [6, 23, ''],
  [6, 12, ''],
  [7, 14, ''],
  [7, 21, ''],
  [7, 28, ''],
  [7, 35, ''],
  [7, 42, ''],
  [7, 49, ''],
  [7, 56, ''],
  [7, 15, ''],
  [7, 23, ''],
  [7, 31, ''],
  [7, 39, ''],
  [7, 47, ''],
  [7, 55, ''],
  [7, 63, ''],
  [7, 6, ''],
  [7, 5, ''],
  [7, 4, ''],
  [7, 3, ''],
  [7, 2, ''],
  [7, 1, ''],
  [7, 0, ''],
  [7, 22, ''],
  [7, 13, ''],
  [8, 1, ''],
  [8, 1, 'n'],
  [8, 17, ''],
  [8, 26, ''],
  [8, 35, ''],
  [8, 44, ''],
  [8, 53, ''],
  [8, 62, ''],
  [8, 0, ''],
  [8, 0, 'n'],
  [8, 9, ''],
  [8, 10, ''],
  [8, 11, ''],
  [8, 12, ''],
  [8, 13, ''],
  [8, 14, ''],
  [8, 15, ''],
  [8, 16, ''],
  [8, 24, ''],
  [8, 32, ''],
  [8, 40, ''],
  [8, 48, ''],
  [8, 56, ''],
  [8, 25, ''],
  [8, 2, ''],
  [8, 18, ''],
  [9, 0, ''],
  [9, 0, 'n'],
  [9, 2, ''],
  [9, 2, 'n'],
  [9, 16, ''],
  [9, 18, ''],
  [9, 27, ''],
  [9, 36, ''],
  [9, 45, ''],
  [9, 54, ''],
  [9, 63, ''],
  [9, 1, ''],
  [9, 1, 'n'],
  [9, 10, ''],
  [9, 11, ''],
  [9, 12, ''],
  [9, 13, ''],
  [9, 14, ''],
  [9, 15, ''],
  [9, 17, ''],
  [9, 25, ''],
  [9, 33, ''],
  [9, 41, ''],
  [9, 49, ''],
  [9, 57, ''],
  [9, 8, ''],
  [9, 24, ''],
  [9, 26, ''],
  [9, 3, ''],
  [9, 19, ''],
  [10, 1, ''],
  [10, 1, 'n'],
  [10, 3, ''],
  [10, 3, 'n'],
  [10, 17, ''],
  [10, 24, ''],
  [10, 19, ''],
  [10, 28, ''],
  [10, 37, ''],
  [10, 46, ''],
  [10, 55, ''],
  [10, 2, ''],
  [10, 2, 'n'],
  [10, 11, ''],
  [10, 12, ''],
  [10, 13, ''],
  [10, 14, ''],
  [10, 15, ''],
  [10, 18, ''],
  [10, 26, ''],
  [10, 34, ''],
  [10, 42, ''],
  [10, 50, ''],
  [10, 58, ''],
  [10, 9, ''],
  [10, 8, ''],
  [10, 25, ''],
  [10, 27, ''],
  [10, 0, ''],
  [10, 16, ''],
  [10, 4, ''],
  [10, 20, ''],
  [11, 2, ''],
  [11, 2, 'n'],
  [11, 4, ''],
  [11, 4, 'n'],
  [11, 18, ''],
  [11, 25, ''],
  [11, 32, ''],
  [11, 20, ''],
  [11, 29, ''],
  [11, 38, ''],
  [11, 47, ''],
  [11, 3, ''],
  [11, 3, 'n'],
  [11, 12, ''],
  [11, 13, ''],
  [11, 14, ''],
  [11, 15, ''],
  [11, 19, ''],
  [11, 27, ''],
  [11, 35, ''],
  [11, 43, ''],
  [11, 51, ''],
  [11, 59, ''],
  [11, 10, ''],
  [11, 9, ''],
  [11, 8, ''],
  [11, 26, ''],
  [11, 28, ''],
  [11, 1, ''],
  [11, 17, ''],
  [11, 5, ''],
  [11, 21, ''],
  [12, 3, ''],
  [12, 3, 'n'],
  [12, 5, ''],
  [12, 5, 'n'],
  [12, 19, ''],
  [12, 26, ''],
  [12, 33, ''],
  [12, 40, ''],
  [12, 21, ''],
  [12, 30, ''],
  [12, 39, ''],
  [12, 4, ''],
  [12, 4, 'n'],
  [12, 13, ''],
  [12, 14, ''],
  [12, 15, ''],
  [12, 20, ''],
  [12, 28, ''],
  [12, 36, ''],
  [12, 44, ''],
  [12, 52, ''],
  [12, 60, ''],
  [12, 11, ''],
  [12, 10, ''],
  [12, 9, ''],
  [12, 8, ''],
  [12, 27, ''],
  [12, 29, ''],
  [12, 2, ''],
  [12, 18, ''],
  [12, 6, ''],
  [12, 22, ''],
  [13, 4, ''],
  [13, 4, 'n'],
  [13, 6, ''],
  [13, 6, 'n'],
  [13, 20, ''],
  [13, 27, ''],
  [13, 34, ''],
  [13, 41, ''],
  [13, 48, ''],
  [13, 22, ''],
  [13, 31, ''],
  [13, 5, ''],
  [13, 5, 'n'],
  [13, 14, ''],
  [13, 15, ''],
  [13, 21, ''],
  [13, 29, ''],
  [13, 37, ''],
  [13, 45, ''],
  [13, 53, ''],
  [13, 61, ''],
  [13, 12, ''],
  [13, 11, ''],
  [13, 10, ''],
  [13, 9, ''],
  [13, 8, ''],
  [13, 28, ''],
  [13, 30, ''],
  [13, 3, ''],
  [13, 19, ''],
  [13, 7, ''],
  [13, 23, ''],
  [14, 5, ''],
  [14, 5, 'n'],
  [14, 7, ''],
  [14, 7, 'n'],
  [14, 21, ''],
  [14, 28, ''],
  [14, 35, ''],
  [14, 42, ''],
  [14, 49, ''],
  [14, 56, ''],
  [14, 23, ''],
  [14, 6, ''],
  [14, 6, 'n'],
  [14, 15, ''],
  [14, 22, ''],
  [14, 30, ''],
  [14, 38, ''],
  [14, 46, ''],
  [14, 54, ''],
  [14, 62, ''],
  [14, 13, ''],
  [14, 12, ''],
  [14, 11, ''],
  [14, 10, ''],
  [14, 9, ''],
  [14, 8, ''],
  [14, 29, ''],
  [14, 31, ''],
  [14, 4, ''],
  [14, 20, ''],
  [15, 6, ''],
  [15, 6, 'n'],
  [15, 22, ''],
  [15, 29, ''],
  [15, 36, ''],
  [15, 43, ''],
  [15, 50, ''],
  [15, 57, ''],
  [15, 7, ''],
  [15, 7, 'n'],
  [15, 23, ''],
  [15, 31, ''],
  [15, 39, ''],
  [15, 47, ''],
  [15, 55, ''],
  [15, 63, ''],
  [15, 14, ''],
  [15, 13, ''],
  [15, 12, ''],
  [15, 11, ''],
  [15, 10, ''],
  [15, 9, ''],
  [15, 8, ''],
  [15, 30, ''],
  [15, 5, ''],
  [15, 21, ''],
  [16, 9, ''],
  [16, 2, ''],
  [16, 25, ''],
  [16, 34, ''],
  [16, 43, ''],
  [16, 52, ''],
  [16, 61, ''],
  [16, 8, ''],
  [16, 0, ''],
  [16, 17, ''],
  [16, 18, ''],
  [16, 19, ''],
  [16, 20, ''],
  [16, 21, ''],
  [16, 22, ''],
  [16, 23, ''],
  [16, 24, ''],
  [16, 32, ''],
  [16, 40, ''],
  [16, 48, ''],
  [16, 56, ''],
  [16, 1, ''],
  [16, 33, ''],
  [16, 10, ''],
  [16, 26, ''],
  [17, 8, ''],
  [17, 10, ''],
  [17, 3, ''],
  [17, 24, ''],
  [17, 26, ''],
  [17, 35, ''],
  [17, 44, ''],
  [17, 53, ''],
  [17, 62, ''],
  [17, 9, ''],
  [17, 1, ''],
  [17, 18, ''],
  [17, 19, ''],
  [17, 20, ''],
  [17, 21, ''],
  [17, 22, ''],
  [17, 23, ''],
  [17, 25, ''],
  [17, 33, ''],
  [17, 41, ''],
  [17, 49, ''],
  [17, 57, ''],
  [17, 16, ''],
  [17, 0, ''],
  [17, 2, ''],
  [17, 32, ''],
  [17, 34, ''],
  [17, 11, ''],
  [17, 27, ''],
  [18, 9, ''],
  [18, 0, ''],
  [18, 11, ''],
  [18, 4, ''],
  [18, 25, ''],
  [18, 32, ''],
  [18, 27, ''],
  [18, 36, ''],
  [18, 45, ''],
  [18, 54, ''],
  [18, 63, ''],
  [18, 10, ''],
  [18, 2, ''],
  [18, 19, ''],
  [18, 20, ''],
  [18, 21, ''],
  [18, 22, ''],
  [18, 23, ''],
  [18, 26, ''],
  [18, 34, ''],
  [18, 42, ''],
  [18, 50, ''],
  [18, 58, ''],
  [18, 17, ''],
  [18, 16, ''],
  [18, 1, ''],
  [18, 3, ''],
  [18, 33, ''],
  [18, 35, ''],
  [18, 8, ''],
  [18, 24, ''],
  [18, 12, ''],
  [18, 28, ''],
  [19, 10, ''],
  [19, 1, ''],
  [19, 12, ''],
  [19, 5, ''],
  [19, 26, ''],
  [19, 33, ''],
  [19, 40, ''],
  [19, 28, ''],
  [19, 37, ''],
  [19, 46, ''],
  [19, 55, ''],
  [19, 11, ''],
  [19, 3, ''],
  [19, 20, ''],
  [19, 21, ''],
  [19, 22, ''],
  [19, 23, ''],
  [19, 27, ''],
  [19, 35, ''],
  [19, 43, ''],
  [19, 51, ''],
  [19, 59, ''],
  [19, 18, ''],
  [19, 17, ''],
  [19, 16, ''],
  [19, 2, ''],
  [19, 4, ''],
  [19, 34, ''],
  [19, 36, ''],
  [19, 9, ''],
  [19, 25, ''],
  [19, 13, ''],
  [19, 29, ''],
  [20, 11, ''],
  [20, 2, ''],
  [20, 13, ''],
  [20, 6, ''],
  [20, 27, ''],
  [20, 34, ''],
  [20, 41, ''],
  [20, 48, ''],
  [20, 29, ''],
  [20, 38, ''],
  [20, 47, ''],
  [20, 12, ''],
  [20, 4, ''],
  [20, 21, ''],
  [20, 22, ''],
  [20, 23, ''],
  [20, 28, ''],
  [20, 36, ''],
  [20, 44, ''],
  [20, 52, ''],
  [20, 60, ''],
  [20, 19, ''],
  [20, 18, ''],
  [20, 17, ''],
  [20, 16, ''],
  [20, 3, ''],
  [20, 5, ''],
  [20, 35, ''],
  [20, 37, ''],
  [20, 10, ''],
  [20, 26, ''],
  [20, 14, ''],
  [20, 30, ''],
  [21, 12, ''],
  [21, 3, ''],
  [21, 14, ''],
  [21, 7, ''],
  [21, 28, ''],
  [21, 35, ''],
  [21, 42, ''],
  [21, 49, ''],
  [21, 56, ''],
  [21, 30, ''],
  [21, 39, ''],
  [21, 13, ''],
  [21, 5, ''],
  [21, 22, ''],
  [21, 23, ''],
  [21, 29, ''],
  [21, 37, ''],
  [21, 45, ''],
  [21, 53, ''],
  [21, 61, ''],
  [21, 20, ''],
  [21, 19, ''],
  [21, 18, ''],
  [21, 17, ''],
  [21, 16, ''],
  [21, 4, ''],
  [21, 6, ''],
  [21, 36, ''],
  [21, 38, ''],
  [21, 11, ''],
  [21, 27, ''],
  [21, 15, ''],
  [21, 31, ''],
  [22, 13, ''],
  [22, 4, ''],
  [22, 15, ''],
  [22, 29, ''],
  [22, 36, ''],
  [22, 43, ''],
  [22, 50, ''],
  [22, 57, ''],
  [22, 31, ''],
  [22, 14, ''],
  [22, 6, ''],
  [22, 23, ''],
  [22, 30, ''],
  [22, 38, ''],
  [22, 46, ''],
  [22, 54, ''],
  [22, 62, ''],
  [22, 21, ''],
  [22, 20, ''],
  [22, 19, ''],
  [22, 18, ''],
  [22, 17, ''],
  [22, 16, ''],
  [22, 5, ''],
  [22, 7, ''],
  [22, 37, ''],
  [22, 39, ''],
  [22, 12, ''],
  [22, 28, ''],
  [23, 14, ''],
  [23, 5, ''],
  [23, 30, ''],
  [23, 37, ''],
  [23, 44, ''],
  [23, 51, ''],
  [23, 58, ''],
  [23, 15, ''],
  [23, 7, ''],
  [23, 31, ''],
  [23, 39, ''],
  [23, 47, ''],
  [23, 55, ''],
  [23, 63, ''],
  [23, 22, ''],
  [23, 21, ''],
  [23, 20, ''],
  [23, 19, ''],
  [23, 18, ''],
  [23, 17, ''],
  [23, 16, ''],
  [23, 6, ''],
  [23, 38, ''],
  [23, 13, ''],
  [23, 29, ''],
  [24, 17, ''],
  [24, 10, ''],
  [24, 3, ''],
  [24, 33, ''],
  [24, 42, ''],
  [24, 51, ''],
  [24, 60, ''],
  [24, 16, ''],
  [24, 8, ''],
  [24, 0, ''],
  [24, 25, ''],
  [24, 26, ''],
  [24, 27, ''],
  [24, 28, ''],
  [24, 29, ''],
  [24, 30, ''],
  [24, 31, ''],
  [24, 32, ''],
  [24, 40, ''],
  [24, 48, ''],
  [24, 56, ''],
  [24, 9, ''],
  [24, 41, ''],
  [24, 18, ''],
  [24, 34, ''],
  [25, 16, ''],
  [25, 18, ''],
  [25, 11, ''],
  [25, 4, ''],
  [25, 32, ''],
  [25, 34, ''],
  [25, 43, ''],
  [25, 52, ''],
  [25, 61, ''],
  [25, 17, ''],
  [25, 9, ''],
  [25, 1, ''],
  [25, 26, ''],
  [25, 27, ''],
  [25, 28, ''],
  [25, 29, ''],
  [25, 30, ''],
  [25, 31, ''],
  [25, 33, ''],
  [25, 41, ''],
  [25, 49, ''],
  [25, 57, ''],
  [25, 24, ''],
  [25, 8, ''],
  [25, 10, ''],
  [25, 40, ''],
  [25, 42, ''],
  [25, 19, ''],
  [25, 35, ''],
  [26, 17, ''],
  [26, 8, ''],
  [26, 19, ''],
  [26, 12, ''],
  [26, 5, ''],
  [26, 33, ''],
  [26, 40, ''],
  [26, 35, ''],
  [26, 44, ''],
  [26, 53, ''],
  [26, 62, ''],
  [26, 18, ''],
  [26, 10, ''],
  [26, 2, ''],
  [26, 27, ''],
  [26, 28, ''],
  [26, 29, ''],
  [26, 30, ''],
  [26, 31, ''],
  [26, 34, ''],
  [26, 42, ''],
  [26, 50, ''],
  [26, 58, ''],
  [26, 25, ''],
  [26, 24, ''],
  [26, 9, ''],
  [26, 11, ''],
  [26, 41, ''],
  [26, 43, ''],
  [26, 16, ''],
  [26, 32, ''],
  [26, 20, ''],
  [26, 36, ''],
  [27, 18, ''],
  [27, 9, ''],
  [27, 0, ''],
  [27, 20, ''],
  [27, 13, ''],
  [27, 6, ''],
  [27, 34, ''],
  [27, 41, ''],
  [27, 48, ''],
  [27, 36, ''],
  [27, 45, ''],
  [27, 54, ''],
  [27, 63, ''],
  [27, 19, ''],
  [27, 11, ''],
  [27, 3, ''],
  [27, 28, ''],
  [27, 29, ''],
  [27, 30, ''],
  [27, 31, ''],
  [27, 35, ''],
  [27, 43, ''],
  [27, 51, ''],
  [27, 59, ''],
  [27, 26, ''],
  [27, 25, ''],
  [27, 24, ''],
  [27, 10, ''],
  [27, 12, ''],
  [27, 42, ''],
  [27, 44, ''],
  [27, 17, ''],
  [27, 33, ''],
  [27, 21, ''],
  [27, 37, ''],
  [28, 19, ''],
  [28, 10, ''],
  [28, 1, ''],
  [28, 21, ''],
  [28, 14, ''],
  [28, 7, ''],
  [28, 35, ''],
  [28, 42, ''],
  [28, 49, ''],
  [28, 56, ''],
  [28, 37, ''],
  [28, 46, ''],
  [28, 55, ''],
  [28, 20, ''],
  [28, 12, ''],
  [28, 4, ''],
  [28, 29, ''],
  [28, 30, ''],
  [28, 31, ''],
  [28, 36, ''],
  [28, 44, ''],
  [28, 52, ''],
  [28, 60, ''],
  [28, 27, ''],
  [28, 26, ''],
  [28, 25, ''],
  [28, 24, ''],
  [28, 11, ''],
  [28, 13, ''],
  [28, 43, ''],
  [28, 45, ''],
  [28, 18, ''],
  [28, 34, ''],
  [28, 22, ''],
  [28, 38, ''],
  [29, 20, ''],
  [29, 11, ''],
  [29, 2, ''],
  [29, 22, ''],
  [29, 15, ''],
  [29, 36, ''],
  [29, 43, ''],
  [29, 50, ''],
  [29, 57, ''],
  [29, 38, ''],
  [29, 47, ''],
  [29, 21, ''],
  [29, 13, ''],
  [29, 5, ''],
  [29, 30, ''],
  [29, 31, ''],
  [29, 37, ''],
  [29, 45, ''],
  [29, 53, ''],
  [29, 61, ''],
  [29, 28, ''],
  [29, 27, ''],
  [29, 26, ''],
  [29, 25, ''],
  [29, 24, ''],
  [29, 12, ''],
  [29, 14, ''],
  [29, 44, ''],
  [29, 46, ''],
  [29, 19, ''],
  [29, 35, ''],
  [29, 23, ''],
  [29, 39, ''],
  [30, 21, ''],
  [30, 12, ''],
  [30, 3, ''],
  [30, 23, ''],
  [30, 37, ''],
  [30, 44, ''],
  [30, 51, ''],
  [30, 58, ''],
  [30, 39, ''],
  [30, 22, ''],
  [30, 14, ''],
  [30, 6, ''],
  [30, 31, ''],
  [30, 38, ''],
  [30, 46, ''],
  [30, 54, ''],
  [30, 62, ''],
  [30, 29, ''],
  [30, 28, ''],
  [30, 27, ''],
  [30, 26, ''],
  [30, 25, ''],
  [30, 24, ''],
  [30, 13, ''],
  [30, 15, ''],
  [30, 45, ''],
  [30, 47, ''],
  [30, 20, ''],
  [30, 36, ''],
  [31, 22, ''],
  [31, 13, ''],
  [31, 4, ''],
  [31, 38, ''],
  [31, 45, ''],
  [31, 52, ''],
  [31, 59, ''],
  [31, 23, ''],
  [31, 15, ''],
  [31, 7, ''],
  [31, 39, ''],
  [31, 47, ''],
  [31, 55, ''],
  [31, 63, ''],
  [31, 30, ''],
  [31, 29, ''],
  [31, 28, ''],
  [31, 27, ''],
  [31, 26, ''],
  [31, 25, ''],
  [31, 24, ''],
  [31, 14, ''],
  [31, 46, ''],
  [31, 21, ''],
  [31, 37, ''],
  [32, 25, ''],
  [32, 18, ''],
  [32, 11, ''],
  [32, 4, ''],
  [32, 41, ''],
  [32, 50, ''],
  [32, 59, ''],
  [32, 24, ''],
  [32, 16, ''],
  [32, 8, ''],
  [32, 0, ''],
  [32, 33, ''],
  [32, 34, ''],
  [32, 35, ''],
  [32, 36, ''],
  [32, 37, ''],
  [32, 38, ''],
  [32, 39, ''],
  [32, 40, ''],
  [32, 48, ''],
  [32, 56, ''],
  [32, 17, ''],
  [32, 49, ''],
  [32, 26, ''],
  [32, 42, ''],
  [33, 24, ''],
  [33, 26, ''],
  [33, 19, ''],
  [33, 12, ''],
  [33, 5, ''],
  [33, 40, ''],
  [33, 42, ''],
  [33, 51, ''],
  [33, 60, ''],
  [33, 25, ''],
  [33, 17, ''],
  [33, 9, ''],
  [33, 1, ''],
  [33, 34, ''],
  [33, 35, ''],
  [33, 36, ''],
  [33, 37, ''],
  [33, 38, ''],
  [33, 39, ''],
  [33, 41, ''],
  [33, 49, ''],
  [33, 57, ''],
  [33, 32, ''],
  [33, 16, ''],
  [33, 18, ''],
  [33, 48, ''],
  [33, 50, ''],
  [33, 27, ''],
  [33, 43, ''],
  [34, 25, ''],
  [34, 16, ''],
  [34, 27, ''],
  [34, 20, ''],
  [34, 13, ''],
  [34, 6, ''],
  [34, 41, ''],
  [34, 48, ''],
  [34, 43, ''],
  [34, 52, ''],
  [34, 61, ''],
  [34, 26, ''],
  [34, 18, ''],
  [34, 10, ''],
  [34, 2, ''],
  [34, 35, ''],
  [34, 36, ''],
  [34, 37, ''],
  [34, 38, ''],
  [34, 39, ''],
  [34, 42, ''],
  [34, 50, ''],
  [34, 58, ''],
  [34, 33, ''],
  [34, 32, ''],
  [34, 17, ''],
  [34, 19, ''],
  [34, 49, ''],
  [34, 51, ''],
  [34, 24, ''],
  [34, 40, ''],
  [34, 28, ''],
  [34, 44, ''],
  [35, 26, ''],
  [35, 17, ''],
  [35, 8, ''],
  [35, 28, ''],
  [35, 21, ''],
  [35, 14, ''],
  [35, 7, ''],
  [35, 42, ''],
  [35, 49, ''],
  [35, 56, ''],
  [35, 44, ''],
  [35, 53, ''],
  [35, 62, ''],
  [35, 27, ''],
  [35, 19, ''],
  [35, 11, ''],
  [35, 3, ''],
  [35, 36, ''],
  [35, 37, ''],
  [35, 38, ''],
  [35, 39, ''],
  [35, 43, ''],
  [35, 51, ''],
  [35, 59, ''],
  [35, 34, ''],
  [35, 33, ''],
  [35, 32, ''],
  [35, 18, ''],
  [35, 20, ''],
  [35, 50, ''],
  [35, 52, ''],
  [35, 25, ''],
  [35, 41, ''],
  [35, 29, ''],
  [35, 45, ''],
  [36, 27, ''],
  [36, 18, ''],
  [36, 9, ''],
  [36, 0, ''],
  [36, 29, ''],
  [36, 22, ''],
  [36, 15, ''],
  [36, 43, ''],
  [36, 50, ''],
  [36, 57, ''],
  [36, 45, ''],
  [36, 54, ''],
  [36, 63, ''],
  [36, 28, ''],
  [36, 20, ''],
  [36, 12, ''],
  [36, 4, ''],
  [36, 37, ''],
  [36, 38, ''],
  [36, 39, ''],
  [36, 44, ''],
  [36, 52, ''],
  [36, 60, ''],
  [36, 35, ''],
  [36, 34, ''],
  [36, 33, ''],
  [36, 32, ''],
  [36, 19, ''],
  [36, 21, ''],
  [36, 51, ''],
  [36, 53, ''],
  [36, 26, ''],
  [36, 42, ''],
  [36, 30, ''],
  [36, 46, ''],
  [37, 28, ''],
  [37, 19, ''],
  [37, 10, ''],
  [37, 1, ''],
  [37, 30, ''],
  [37, 23, ''],
  [37, 44, ''],
  [37, 51, ''],
  [37, 58, ''],
  [37, 46, ''],
  [37, 55, ''],
  [37, 29, ''],
  [37, 21, ''],
  [37, 13, ''],
  [37, 5, ''],
  [37, 38, ''],
  [37, 39, ''],
  [37, 45, ''],
  [37, 53, ''],
  [37, 61, ''],
  [37, 36, ''],
  [37, 35, ''],
  [37, 34, ''],
  [37, 33, ''],
  [37, 32, ''],
  [37, 20, ''],
  [37, 22, ''],
  [37, 52, ''],
  [37, 54, ''],
  [37, 27, ''],
  [37, 43, ''],
  [37, 31, ''],
  [37, 47, ''],
  [38, 29, ''],
  [38, 20, ''],
  [38, 11, ''],
  [38, 2, ''],
  [38, 31, ''],
  [38, 45, ''],
  [38, 52, ''],
  [38, 59, ''],
  [38, 47, ''],
  [38, 30, ''],
  [38, 22, ''],
  [38, 14, ''],
  [38, 6, ''],
  [38, 39, ''],
  [38, 46, ''],
  [38, 54, ''],
  [38, 62, ''],
  [38, 37, ''],
  [38, 36, ''],
  [38, 35, ''],
  [38, 34, ''],
  [38, 33, ''],
  [38, 32, ''],
  [38, 21, ''],
  [38, 23, ''],
  [38, 53, ''],
  [38, 55, ''],
  [38, 28, ''],
  [38, 44, ''],
  [39, 30, ''],
  [39, 21, ''],
  [39, 12, ''],
  [39, 3, ''],
  [39, 46, ''],
  [39, 53, ''],
  [39, 60, ''],
  [39, 31, ''],
  [39, 23, ''],
  [39, 15, ''],
  [39, 7, ''],
  [39, 47, ''],
  [39, 55, ''],
  [39, 63, ''],
  [39, 38, ''],
  [39, 37, ''],
  [39, 36, ''],
  [39, 35, ''],
  [39, 34, ''],
  [39, 33, ''],
  [39, 32, ''],
  [39, 22, ''],
  [39, 54, ''],
  [39, 29, ''],
  [39, 45, ''],
  [40, 33, ''],
  [40, 26, ''],
  [40, 19, ''],
  [40, 12, ''],
  [40, 5, ''],
  [40, 49, ''],
  [40, 58, ''],
  [40, 32, ''],
  [40, 24, ''],
  [40, 16, ''],
  [40, 8, ''],
  [40, 0, ''],
  [40, 41, ''],
  [40, 42, ''],
  [40, 43, ''],
  [40, 44, ''],
  [40, 45, ''],
  [40, 46, ''],
  [40, 47, ''],
  [40, 48, ''],
  [40, 56, ''],
  [40, 25, ''],
  [40, 57, ''],
  [40, 34, ''],
  [40, 50, ''],
  [41, 32, ''],
  [41, 34, ''],
  [41, 27, ''],
  [41, 20, ''],
  [41, 13, ''],
  [41, 6, ''],
  [41, 48, ''],
  [41, 50, ''],
  [41, 59, ''],
  [41, 33, ''],
  [41, 25, ''],
  [41, 17, ''],
  [41, 9, ''],
  [41, 1, ''],
  [41, 42, ''],
  [41, 43, ''],
  [41, 44, ''],
  [41, 45, ''],
  [41, 46, ''],
  [41, 47, ''],
  [41, 49, ''],
  [41, 57, ''],
  [41, 40, ''],
  [41, 24, ''],
  [41, 26, ''],
  [41, 56, ''],
  [41, 58, ''],
  [41, 35, ''],
  [41, 51, ''],
  [42, 33, ''],
  [42, 24, ''],
  [42, 35, ''],
  [42, 28, ''],
  [42, 21, ''],
  [42, 14, ''],
  [42, 7, ''],
  [42, 49, ''],
  [42, 56, ''],
  [42, 51, ''],
  [42, 60, ''],
  [42, 34, ''],
  [42, 26, ''],
  [42, 18, ''],
  [42, 10, ''],
  [42, 2, ''],
  [42, 43, ''],
  [42, 44, ''],
  [42, 45, ''],
  [42, 46, ''],
  [42, 47, ''],
  [42, 50, ''],
  [42, 58, ''],
  [42, 41, ''],
  [42, 40, ''],
  [42, 25, ''],
  [42, 27, ''],
  [42, 57, ''],
  [42, 59, ''],
  [42, 32, ''],
  [42, 48, ''],
  [42, 36, ''],
  [42, 52, ''],
  [43, 34, ''],
  [43, 25, ''],
  [43, 16, ''],
  [43, 36, ''],
  [43, 29, ''],
  [43, 22, ''],
  [43, 15, ''],
  [43, 50, ''],
  [43, 57, ''],
  [43, 52, ''],
  [43, 61, ''],
  [43, 35, ''],
  [43, 27, ''],
  [43, 19, ''],
  [43, 11, ''],
  [43, 3, ''],
  [43, 44, ''],
  [43, 45, ''],
  [43, 46, ''],
  [43, 47, ''],
  [43, 51, ''],
  [43, 59, ''],
  [43, 42, ''],
  [43, 41, ''],
  [43, 40, ''],
  [43, 26, ''],
  [43, 28, ''],
  [43, 58, ''],
  [43, 60, ''],
  [43, 33, ''],
  [43, 49, ''],
  [43, 37, ''],
  [43, 53, ''],
  [44, 35, ''],
  [44, 26, ''],
  [44, 17, ''],
  [44, 8, ''],
  [44, 37, ''],
  [44, 30, ''],
  [44, 23, ''],
  [44, 51, ''],
  [44, 58, ''],
  [44, 53, ''],
  [44, 62, ''],
  [44, 36, ''],
  [44, 28, ''],
  [44, 20, ''],
  [44, 12, ''],
  [44, 4, ''],
  [44, 45, ''],
  [44, 46, ''],
  [44, 47, ''],
  [44, 52, ''],
  [44, 60, ''],
  [44, 43, ''],
  [44, 42, ''],
  [44, 41, ''],
  [44, 40, ''],
  [44, 27, ''],
  [44, 29, ''],
  [44, 59, ''],
  [44, 61, ''],
  [44, 34, ''],
  [44, 50, ''],
  [44, 38, ''],
  [44, 54, ''],
  [45, 36, ''],
  [45, 27, ''],
  [45, 18, ''],
  [45, 9, ''],
  [45, 0, ''],
  [45, 38, ''],
  [45, 31, ''],
  [45, 52, ''],
  [45, 59, ''],
  [45, 54, ''],
  [45, 63, ''],
  [45, 37, ''],
  [45, 29, ''],
  [45, 21, ''],
  [45, 13, ''],
  [45, 5, ''],
  [45, 46, ''],
  [45, 47, ''],
  [45, 53, ''],
  [45, 61, ''],
  [45, 44, ''],
  [45, 43, ''],
  [45, 42, ''],
  [45, 41, ''],
  [45, 40, ''],
  [45, 28, ''],
  [45, 30, ''],
  [45, 60, ''],
  [45, 62, ''],
  [45, 35, ''],
  [45, 51, ''],
  [45, 39, ''],
  [45, 55, ''],
  [46, 37, ''],
  [46, 28, ''],
  [46, 19, ''],
  [46, 10, ''],
  [46, 1, ''],
  [46, 39, ''],
  [46, 53, ''],
  [46, 60, ''],
  [46, 55, ''],
  [46, 38, ''],
  [46, 30, ''],
  [46, 22, ''],
  [46, 14, ''],
  [46, 6, ''],
  [46, 47, ''],
  [46, 54, ''],
  [46, 62, ''],
  [46, 45, ''],
  [46, 44, ''],
  [46, 43, ''],
  [46, 42, ''],
  [46, 41, ''],
  [46, 40, ''],
  [46, 29, ''],
  [46, 31, ''],
  [46, 61, ''],
  [46, 63, ''],
  [46, 36, ''],
  [46, 52, ''],
  [47, 38, ''],
  [47, 29, ''],
  [47, 20, ''],
  [47, 11, ''],
  [47, 2, ''],
  [47, 54, ''],
  [47, 61, ''],
  [47, 39, ''],
  [47, 31, ''],
  [47, 23, ''],
  [47, 15, ''],
  [47, 7, ''],
  [47, 55, ''],
  [47, 63, ''],
  [47, 46, ''],
  [47, 45, ''],
  [47, 44, ''],
  [47, 43, ''],
  [47, 42, ''],
  [47, 41, ''],
  [47, 40, ''],
  [47, 30, ''],
  [47, 62, ''],
  [47, 37, ''],
  [47, 53, ''],
  [48, 41, ''],
  [48, 34, ''],
  [48, 27, ''],
  [48, 20, ''],
  [48, 13, ''],
  [48, 6, ''],
  [48, 57, ''],
  [48, 57, 'n'],
  [48, 40, ''],
  [48, 32, ''],
  [48, 24, ''],
  [48, 16, ''],
  [48, 8, ''],
  [48, 0, ''],
  [48, 49, ''],
  [48, 50, ''],
  [48, 51, ''],
  [48, 52, ''],
  [48, 53, ''],
  [48, 54, ''],
  [48, 55, ''],
  [48, 56, ''],
  [48, 56, 'n'],
  [48, 33, ''],
  [48, 42, ''],
  [48, 58, ''],
  [49, 40, ''],
  [49, 42, ''],
  [49, 35, ''],
  [49, 28, ''],
  [49, 21, ''],
  [49, 14, ''],
  [49, 7, ''],
  [49, 56, ''],
  [49, 56, 'n'],
  [49, 58, ''],
  [49, 58, 'n'],
  [49, 41, ''],
  [49, 33, ''],
  [49, 25, ''],
  [49, 17, ''],
  [49, 9, ''],
  [49, 1, ''],
  [49, 50, ''],
  [49, 51, ''],
  [49, 52, ''],
  [49, 53, ''],
  [49, 54, ''],
  [49, 55, ''],
  [49, 57, ''],
  [49, 57, 'n'],
  [49, 48, ''],
  [49, 32, ''],
  [49, 34, ''],
  [49, 43, ''],
  [49, 59, ''],
  [50, 41, ''],
  [50, 32, ''],
  [50, 43, ''],
  [50, 36, ''],
  [50, 29, ''],
  [50, 22, ''],
  [50, 15, ''],
  [50, 57, ''],
  [50, 57, 'n'],
  [50, 59, ''],
  [50, 59, 'n'],
  [50, 42, ''],
  [50, 34, ''],
  [50, 26, ''],
  [50, 18, ''],
  [50, 10, ''],
  [50, 2, ''],
  [50, 51, ''],
  [50, 52, ''],
  [50, 53, ''],
  [50, 54, ''],
  [50, 55, ''],
  [50, 58, ''],
  [50, 58, 'n'],
  [50, 49, ''],
  [50, 48, ''],
  [50, 33, ''],
  [50, 35, ''],
  [50, 40, ''],
  [50, 56, ''],
  [50, 44, ''],
  [50, 60, ''],
  [51, 42, ''],
  [51, 33, ''],
  [51, 24, ''],
  [51, 44, ''],
  [51, 37, ''],
  [51, 30, ''],
  [51, 23, ''],
  [51, 58, ''],
  [51, 58, 'n'],
  [51, 60, ''],
  [51, 60, 'n'],
  [51, 43, ''],
  [51, 35, ''],
  [51, 27, ''],
  [51, 19, ''],
  [51, 11, ''],
  [51, 3, ''],
  [51, 52, ''],
  [51, 53, ''],
  [51, 54, ''],
  [51, 55, ''],
  [51, 59, ''],
  [51, 59, 'n'],
  [51, 50, ''],
  [51, 49, ''],
  [51, 48, ''],
  [51, 34, ''],
  [51, 36, ''],
  [51, 41, ''],
  [51, 57, ''],
  [51, 45, ''],
  [51, 61, ''],
  [52, 43, ''],
  [52, 34, ''],
  [52, 25, ''],
  [52, 16, ''],
  [52, 45, ''],
  [52, 38, ''],
  [52, 31, ''],
  [52, 59, ''],
  [52, 59, 'n'],
  [52, 61, ''],
  [52, 61, 'n'],
  [52, 44, ''],
  [52, 36, ''],
  [52, 28, ''],
  [52, 20, ''],
  [52, 12, ''],
  [52, 4, ''],
  [52, 53, ''],
  [52, 54, ''],
  [52, 55, ''],
  [52, 60, ''],
  [52, 60, 'n'],
  [52, 51, ''],
  [52, 50, ''],
  [52, 49, ''],
  [52, 48, ''],
  [52, 35, ''],
  [52, 37, ''],
  [52, 42, ''],
  [52, 58, ''],
  [52, 46, ''],
  [52, 62, ''],
  [53, 44, ''],
  [53, 35, ''],
  [53, 26, ''],
  [53, 17, ''],
  [53, 8, ''],
  [53, 46, ''],
  [53, 39, ''],
  [53, 60, ''],
  [53, 60, 'n'],
  [53, 62, ''],
  [53, 62, 'n'],
  [53, 45, ''],
  [53, 37, ''],
  [53, 29, ''],
  [53, 21, ''],
  [53, 13, ''],
  [53, 5, ''],
  [53, 54, ''],
  [53, 55, ''],
  [53, 61, ''],
  [53, 61, 'n'],
  [53, 52, ''],
  [53, 51, ''],
  [53, 50, ''],
  [53, 49, ''],
  [53, 48, ''],
  [53, 36, ''],
  [53, 38, ''],
  [53, 43, ''],
  [53, 59, ''],
  [53, 47, ''],
  [53, 63, ''],
  [54, 45, ''],
  [54, 36, ''],
  [54, 27, ''],
  [54, 18, ''],
  [54, 9, ''],
  [54, 0, ''],
  [54, 47, ''],
  [54, 61, ''],
  [54, 61, 'n'],
  [54, 63, ''],
  [54, 63, 'n'],
  [54, 46, ''],
  [54, 38, ''],
  [54, 30, ''],
  [54, 22, ''],
  [54, 14, ''],
  [54, 6, ''],
  [54, 55, ''],
  [54, 62, ''],
  [54, 62, 'n'],
  [54, 53, ''],
  [54, 52, ''],
  [54, 51, ''],
  [54, 50, ''],
  [54, 49, ''],
  [54, 48, ''],
  [54, 37, ''],
  [54, 39, ''],
  [54, 44, ''],
  [54, 60, ''],
  [55, 46, ''],
  [55, 37, ''],
  [55, 28, ''],
  [55, 19, ''],
  [55, 10, ''],
  [55, 1, ''],
  [55, 62, ''],
  [55, 62, 'n'],
  [55, 47, ''],
  [55, 39, ''],
  [55, 31, ''],
  [55, 23, ''],
  [55, 15, ''],
  [55, 7, ''],
  [55, 63, ''],
  [55, 63, 'n'],
  [55, 54, ''],
  [55, 53, ''],
  [55, 52, ''],
  [55, 51, ''],
  [55, 50, ''],
  [55, 49, ''],
  [55, 48, ''],
  [55, 38, ''],
  [55, 45, ''],
  [55, 61, ''],
  [56, 49, ''],
  [56, 42, ''],
  [56, 35, ''],
  [56, 28, ''],
  [56, 21, ''],
  [56, 14, ''],
  [56, 7, ''],
  [56, 48, ''],
  [56, 40, ''],
  [56, 32, ''],
  [56, 24, ''],
  [56, 16, ''],
  [56, 8, ''],
  [56, 0, ''],
  [56, 57, ''],
  [56, 58, ''],
  [56, 59, ''],
  [56, 60, ''],
  [56, 61, ''],
  [56, 62, ''],
  [56, 63, ''],
  [56, 41, ''],
  [56, 50, ''],
  [57, 48, ''],
  [57, 50, ''],
  [57, 43, ''],
  [57, 36, ''],
  [57, 29, ''],
  [57, 22, ''],
  [57, 15, ''],
  [57, 49, ''],
  [57, 41, ''],
  [57, 33, ''],
  [57, 25, ''],
  [57, 17, ''],
  [57, 9, ''],
  [57, 1, ''],
  [57, 58, ''],
  [57, 59, ''],
  [57, 60, ''],
  [57, 61, ''],
  [57, 62, ''],
  [57, 63, ''],
  [57, 56, ''],
  [57, 40, ''],
  [57, 42, ''],
  [57, 51, ''],
  [58, 49, ''],
  [58, 40, ''],
  [58, 51, ''],
  [58, 44, ''],
  [58, 37, ''],
  [58, 30, ''],
  [58, 23, ''],
  [58, 50, ''],
  [58, 42, ''],
  [58, 34, ''],
  [58, 26, ''],
  [58, 18, ''],
  [58, 10, ''],
  [58, 2, ''],
  [58, 59, ''],
  [58, 60, ''],
  [58, 61, ''],
  [58, 62, ''],
  [58, 63, ''],
  [58, 57, ''],
  [58, 56, ''],
  [58, 41, ''],
  [58, 43, ''],
  [58, 48, ''],
  [58, 52, ''],
  [59, 50, ''],
  [59, 41, ''],
  [59, 32, ''],
  [59, 52, ''],
  [59, 45, ''],
  [59, 38, ''],
  [59, 31, ''],
  [59, 51, ''],
  [59, 43, ''],
  [59, 35, ''],
  [59, 27, ''],
  [59, 19, ''],
  [59, 11, ''],
  [59, 3, ''],
  [59, 60, ''],
  [59, 61, ''],
  [59, 62, ''],
  [59, 63, ''],
  [59, 58, ''],
  [59, 57, ''],
  [59, 56, ''],
  [59, 42, ''],
  [59, 44, ''],
  [59, 49, ''],
  [59, 53, ''],
  [60, 51, ''],
  [60, 42, ''],
  [60, 33, ''],
  [60, 24, ''],
  [60, 53, ''],
  [60, 46, ''],
  [60, 39, ''],
  [60, 52, ''],
  [60, 44, ''],
  [60, 36, ''],
  [60, 28, ''],
  [60, 20, ''],
  [60, 12, ''],
  [60, 4, ''],
  [60, 61, ''],
  [60, 62, ''],
  [60, 63, ''],
  [60, 59, ''],
  [60, 58, ''],
  [60, 57, ''],
  [60, 56, ''],
  [60, 43, ''],
  [60, 45, ''],
  [60, 50, ''],
  [60, 54, ''],
  [61, 52, ''],
  [61, 43, ''],
  [61, 34, ''],
  [61, 25, ''],
  [61, 16, ''],
  [61, 54, ''],
  [61, 47, ''],
  [61, 53, ''],
  [61, 45, ''],
  [61, 37, ''],
  [61, 29, ''],
  [61, 21, ''],
  [61, 13, ''],
  [61, 5, ''],
  [61, 62, ''],
  [61, 63, ''],
  [61, 60, ''],
  [61, 59, ''],
  [61, 58, ''],
  [61, 57, ''],
  [61, 56, ''],
  [61, 44, ''],
  [61, 46, ''],
  [61, 51, ''],
  [61, 55, ''],
  [62, 53, ''],
  [62, 44, ''],
  [62, 35, ''],
  [62, 26, ''],
  [62, 17, ''],
  [62, 8, ''],
  [62, 55, ''],
  [62, 54, ''],
  [62, 46, ''],
  [62, 38, ''],
  [62, 30, ''],
  [62, 22, ''],
  [62, 14, ''],
  [62, 6, ''],
  [62, 63, ''],
  [62, 61, ''],
  [62, 60, ''],
  [62, 59, ''],
  [62, 58, ''],
  [62, 57, ''],
  [62, 56, ''],
  [62, 45, ''],
  [62, 47, ''],
  [62, 52, ''],
  [63, 54, ''],
  [63, 45, ''],
  [63, 36, ''],
  [63, 27, ''],
  [63, 18, ''],
  [63, 9, ''],
  [63, 0, ''],
  [63, 55, ''],
  [63, 47, ''],
  [63, 39, ''],
  [63, 31, ''],
  [63, 23, ''],
  [63, 15, ''],
  [63, 7, ''],
  [63, 62, ''],
  [63, 61, ''],
  [63, 60, ''],
  [63, 59, ''],
  [63, 58, ''],
  [63, 57, ''],
  [63, 56, ''],
  [63, 46, ''],
  [63, 53, ''],
  [0, 0, ''],
];

const datasetFolder = path.resolve('./data/csv_v4/default');

// const inUnits = 14;
const outUnits = 1837; // 1792 moves where queen promotion is default. 44 knight promotion moves + 1 resign

const recordsPerDataset = 50000;
const testRecordsPerDataset = 20000;

const getGroups = async ({ datasetFolder, groupTransformer }) => {
  const dirContents = (await fs.readdir(datasetFolder)).sort();
  const groups = dirContents.map((pointerKey) => ({ pointerKey /* , ratio */ }));
  const transformedGroups = groupTransformer(groups);
  const ratio = 1 / transformedGroups.length;

  return transformedGroups.map(({ pointerKey }) => ({ pointerKey, ratio }));
};

const readMore = async ({ takeMax, pointers, pointerKey, folder, beginningToEnd, randomFileOrder, readerMeta }) => {
  const rawData = await fs.readFile(readerMeta.files[pointerKey][pointers[pointerKey].fileIndex], 'utf-8');
  const parsedData = rawData
    .trim()
    .split('\n')
    .slice(pointers[pointerKey].lineIndex)
    .map((row) => row.split(',')); // Number() ?
  // console.log(parsedData.length);

  if (parsedData.length > takeMax) {
    pointers[pointerKey].lineIndex = pointers[pointerKey].lineIndex + takeMax;

    return parsedData.slice(0, takeMax);
  }

  // console.log(1, pointers[pointerKey].fileIndex);

  pointers[pointerKey].fileIndex = randomFileOrder
    ? Math.floor(Math.random() * readerMeta.files[pointerKey].length)
    : pointers[pointerKey].fileIndex + 1; // % readerMeta.files[pointerKey].length,

  if (pointers[pointerKey].fileIndex >= readerMeta.files[pointerKey].length) {
    pointers[pointerKey].fileIndex = 0;
    shuffle(readerMeta.files[pointerKey]);
    // readerMeta.files[pointerKey].push(...(await getRandomizedFilelist(path.resolve(datasetFolder, pointerKey))));
  }

  pointers[pointerKey].lineIndex = 0;

  // console.log(2, pointers[pointerKey].fileIndex);

  return parsedData;
};

const readFromGroup = async ({
  readerMeta,
  // pointers = {},
  pointerKey,
  take,
  // folder,
  filter = () => true,
  isDupe,
  beginningToEnd,
  dontLogDupes,
  fensInLastTestBatch = {},
  randomFileOrder,
  // fileList,
}) => {
  console.log('------', Object.keys(fensInLastTestBatch).sort()[0]);

  const result = [];
  if (!take) return result;

  const groupFolder = path.resolve(readerMeta.datasetFolder, pointerKey);

  const resetPointer = async (currentPointers) => {
    const fileIndex = Math.floor(Math.random() * readerMeta.files[pointerKey].length);

    if (!randomFileOrder) console.log(`starting to read dataset from file index ${fileIndex}`);

    currentPointers[pointerKey] = {
      fileIndex,
      lineIndex: 0,
    };
    console.log('itt');
    return currentPointers;
  };

  if (!readerMeta.pointers[pointerKey]) {
    await resetPointer(readerMeta.pointers);
  }

  let removedDupes = 0;
  let removedTestFens = 0;
  let remaining = take;

  console.log('meg itt');
  while (remaining /* && pointers[pointerKey].fileName*/) {
    const records = (
      await readMore({
        takeMax: remaining,
        pointers: randomFileOrder ? await resetPointer({}) : readerMeta.pointers,
        pointerKey,
        readerMeta,
        folder: groupFolder,
        beginningToEnd,
        randomFileOrder,
      })
    ).filter((line) => {
      if (!filter(line)) return false;

      if (isDupe(line)) {
        removedDupes += 1;
        return false;
      }

      if (fensInLastTestBatch[line[0]]) {
        removedTestFens += 1;
        return false;
      }

      return true;
    });
    remaining -= records.length;
    result.push(...records);
  }

  if (removedDupes && !dontLogDupes) console.log(`${pointerKey}: ${removedDupes} duplicate fens`);
  if (removedTestFens && !dontLogDupes) console.log(`${pointerKey}: ${removedTestFens} test fens`);

  return result;
};

const getDefaultIsDupe = () => {
  const dupeCache = {};

  return (record) => {
    if (dupeCache[record[0]]) return true;

    dupeCache[record[0]] = true;
    return false;
  };
};

const getFiles = async ({ groups }) => {
  const result = {};

  for (const { pointerKey } of groups) {
    const folder = path.resolve(datasetFolder, pointerKey);
    result[pointerKey] = await getRandomizedFilelist(folder);
  }

  return result;
};

const readers = {};
export const datasetReader = async (options) => {
  if (readers[options.id]) return readers[options.id];

  console.log({ options });
  const id = options.id || Date.now().toString() + Math.random().toString().replace('0.', '');

  const { data: readerMeta, methods } = await getSavedObject(`./data/datasetReader/readerMetas/${id}`);
  await methods.loadData();

  const reader = await getDatasetReader({
    ...options,
    id,
    readerMeta,
  });

  readers[reader.id] = reader;
  return reader;
};

const getDatasetReader = async ({
  filter,
  groupTransformer = (gs) => gs,
  id: sessionId,
  format: defaultFormat = 'columns',
  ysformat: defaultYsformat = 'default',
  readerMeta,
}) => {
  console.log('creating new reader... ', { readerMeta });

  if (!sessionId) throw new Error('missing session id in datasetreader');

  if (!readerMeta.datasetFolder) readerMeta.datasetFolder = path.resolve(datasetFolder);
  if (!readerMeta.pointers) readerMeta.pointers = {};
  if (!readerMeta.testPointers) readerMeta.testPointers = {};

  const groups = await getGroups({ datasetFolder, groupTransformer });
  if (!readerMeta.files) {
    const fls = await getFiles({ groups });
    console.log('filling', Object.keys(fls).length);
    readerMeta.files = fls;
  }
  console.log('sohuold have files', { readerMeta }, readerMeta.files['0.25 - 0.50'][10]);

  let fensInLastTestBatch = {};

  const transformRecord = (record) => {
    // fen,
    // onehot_move,
    // hit_soon,
    // chkmate_soon,
    // result,
    // chkmate_ending ? '1' : '',
    // stall_ending ? '1' : '',
    // is_last ? '1' : '',
    // lmf.map((val) => val.toString(16).padStart(2, '0')).join(''),
    // lmt.map((val) => val.toString(16).padStart(2, '0')).join(''),
    // chkmate_ending || stall_ending ? progress : '',
    // chkmate_ending || stall_ending ? '' : progress * 0.8, // adjusted progress for games that were not completed
    // w_rating,
    // b_rating,
    // min_rating_diff,
    // max_rating_diff,

    // console.log({ record });

    const xs = getXs({ fens: [record[0]], lmf: record[8], lmt: record[9] });
    const ys = new Array(outUnits).fill(0);
    ys[record[1] === '' ? 1836 : Number(record[1])] = 1;

    return { xs, ys };
  };

  const getTransformRecordMoveAsLabel = ({ ysformat }) =>
    console.log(2, { ysformat }) ||
    (ysformat === '1966'
      ? //   output = Concatenate(name='concat-output')([
        //     combined_softmax,
        //     from_softmax,
        //     to_softmax,
        //     knight_promo
        //   ])
        (record) => {
          const ohMove = record[1] === '' ? '1836' : record[1];
          return `${getXs({ fens: [record[0]], lmf: record[8], lmt: record[9] })},${ohMove},${onehot_map[ohMove].slice(
            0,
            2,
          )},${onehot_map[ohMove][2] ? 1 : 0}`; //
        }
      : (record) => {
          return `${getXs({ fens: [record[0]], lmf: record[8], lmt: record[9] })},${
            record[1] === '' ? 1836 : Number(record[1])
          }`;
        });

  const getNextBatch = async ({
    isDupe = getDefaultIsDupe(),
    format = defaultFormat,
    ysformat = defaultYsformat,
  } = {}) => {
    process.stdout.write('reading data from disc..');
    let started = Date.now();

    const results = await Promise.all(
      groups.map(({ pointerKey, ratio }) =>
        readFromGroup({
          readerMeta,
          // pointers: readerMeta.pointers,
          pointerKey,
          // fileList: readerMeta.files[pointerKey],
          take: Math.ceil(recordsPerDataset * ratio),
          // folder: readerMeta.datasetFolder,
          filter,
          isDupe,
          fensInLastTestBatch,
        }),
      ),
    );
    console.log(`  - done in ${Date.now() - started} ms.`);

    process.stdout.write('flattening and shuffling data..');
    started = Date.now();

    let data = shuffle(results.flat());
    console.log(`  - done in ${Date.now() - started} ms.`);

    if (format === 'columns') {
      process.stdout.write('transforming dataset to objects..');
      started = Date.now();
      data = data.map(transformRecord);
      console.log(`  - done in ${Date.now() - started} ms.`);
    }

    if (format === 'csv') {
      const transformRecordMoveAsLabel = getTransformRecordMoveAsLabel({ ysformat });
      process.stdout.write('transforming dataset for csv format..');
      started = Date.now();
      data = data.map(transformRecordMoveAsLabel);
      console.log(`  - done in ${Date.now() - started} ms.`);
    }

    // TODO: do we need this here?
    data = data.filter(Boolean);

    if (format === 'columns') {
      process.stdout.write('transforming dataset to columns..');
      started = Date.now();
      data = data.reduce(
        (p, c) => {
          p.xs.push(c.xs);
          p.ys.push(c.ys);
          return p;
        },
        { xs: [], ys: [] },
      );

      console.log(`  - done in ${Date.now() - started} ms.`);
    }

    if (format === 'csv') {
      process.stdout.write('joining csv lines..');
      started = Date.now();
      data = data.join('\n');
      console.log(`  - done in ${Date.now() - started} ms.`);
    }

    return data;
  };

  const getNextTestBatch = async ({ isDupe = getDefaultIsDupe() } = {}) => {
    try {
      const results = await Promise.all(
        groups.map(({ pointerKey, ratio }) =>
          readFromGroup({
            pointers: readerMeta.testPointers,
            pointerKey,
            take: Math.ceil(recordsPerDataset * ratio),
            folder: readerMeta.datasetFolder,
            filter: (line) => Math.random() > 0.9 && filter(line),
            isDupe,
            randomFileOrder: true,
          }),
        ),
      );

      const rawData = shuffle(results.flat());

      fensInLastTestBatch = rawData.reduce((p, c) => {
        p[c[0]] = true;
        return p;
      }, {});

      const data = rawData
        .slice(0, testRecordsPerDataset)
        .map(transformRecord)
        .filter(Boolean)
        .reduce(
          (p, c) => {
            p.xs.push(c.xs);
            p.ys.push(c.ys);
            return p;
          },
          { xs: [], ys: [] },
        );

      return data;
    } catch (e) {
      console.error(e);
    }
  };

  return {
    getNextBatch,
    getNextTestBatch,
    id: sessionId,
    metadata: readerMeta,
  };
};
